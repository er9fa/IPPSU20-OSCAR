<!DOCTYPE html>
<html>
<title> Can I See the Satellite? </title>
<head>
  <link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500&display=swap" rel="stylesheet">
  <style>
  html {
    max-width: 100%;
    overflow-x: hidden;
  }

  /* title of the page */
  h1 {
      text-align: center;
      font-size: 60px;
      color: white;
      text-shadow: 5px 5px 3px #999;
      font-family: 'Orbitron', sans-serif;
  }

  /* general features of the background */
  body {
    /* background image is copyright free */
    background: url(https://images.unsplash.com/photo-1587465511660-05c929e0e874?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1651&q=80);
    background-size: cover;
    background-attachment: fixed;
    text-align: center;
  }

  /* controls font color of paragraph color */
  p {
    color: white;
  }

  /* controls the second header */
  #header2 {
    border-radius: 50px;
    opacity: 100;
    height: 50px;
    width: 600px;
    margin:0 auto;
    margin-right: 400px;
    margin-top: 0px;
    text-align: center;
    color: white;
    font-size: 30px;
    font-family: 'Orbitron', sans-serif;
    text-shadow: 2px 2px 2px #999;
    float: right;
  }

  /* formatting for the display of images */
  #rcornersimg {
    border-radius: 50px;
    background: black;
    border: 9px double #484E5E;
    width: 500px;
    height: 500px;
    margin: 20px auto 50px auto;
    text-align: center;
    color: white;
    padding: 0 auto;
  }

  /* formatting for the footer */
  footer {
     margin-bottom: 0;
     left:0; bottom:0;
     width: 100%;
     height: 35px;
     opacity: 0.7;
     color: white;
     text-align: center;
     font-family: "Helvetica";
     font-weight: 100;
     position: absolute;
     float: center;
     overflow: hidden;
  }

  /* formatting for the google searchbox */
  .searchBox {
    background-color: #FFFFFF;
    border-radius: 25px;
    border: 1px solid;
    border-color: white;
    margin: 15px 10px 10px 30px;
    width: 400px;
    height: 20px;
    font-size: 18px;
    font-family: "Helvetica";
    font-weight: 100;
    padding: 16px 15px 15px 15px;
    position: absolute;
  }

  /* formatting for the latitude/longitude input boxes */
  .mapInputs {
    background-color: #FFFFFF;
    border-radius: 25px;
    border: 1px solid;
    border-color: white;
    margin: 7px 5px 5px 10px;
    width: 170px;
    height: 27px;
    font-size: 15px;
    font-family: "Helvetica";
    font-weight: 100;
    padding: 5px 5px 5px 10px;
    position: absolute;
  }

  /* controls the growing information boxes */
  .grow {
    padding: 20px 15px 12px 15px;
    width: 400px;
    border-radius: 25px;
    height: 30px;
    float: left;
    transition:height 0.5s;
    text-align: center;
    background-color: transparent;
    font-family: "Helvetica";
    font-weight: 100;
    color: #FFFFFF;
    overflow-y: hidden;
    border: 4px solid #C0ECAD;
  }
  /* controls the hover feature of the information boxes */
  .grow:hover {
    height: 300px;
  }

  /* controls the contents of the site so blur effect can occur */
  .container{
    position: relative;
    width: 100%;
    min-height: 100vh;
    justify-content: center;
    align-items: center;
    transition:0.3s;
    padding: 20px;
  }
  /* activates the blurring of the screen */
  .container#blur.active{
      filter: blur(15px);
      pointer-events: none;
      user-select: none;
      background: transparent;
  }
  /* contents of the container*/
  .container.content{
    position: relative;
    max-width: 800px;
  }

/* formatting for the compute button */
  .a {
    position: relative;
    border-radius:
    padding: 10px 24px;
    display: inline-block;
    margin-top:20px;
    text-decoration: none;
    background-color: #C0ECAD;
    border: 3px solid #black;
    border-radius: 50px;
    color: black;
    padding: 10px 24px;
    cursor: pointer;
    box-shadow: 0 0 15px 0 yellowgreen;
    font-family: "Helvetica";
  }
  /* formatting of button when hovered over */
  .a:hover{
      background-color: lightgray;
  }

  /* formatting for the popup feature */
  #popup{
    position: fixed;
    top: 50%;
    left: 50%;
    transform: translate(-50%,-50%);
    width: 400px;
    padding:50px;
    box-shadow: 0 5px 30px rgba(0,0,0,.30);
    background: #3F4457;
    visibility: hidden;
    opacity: 1;
    transition: 0.5s;
    color: black;
    border: 9px double #C0ECAD;
    font-family: "Helvetica";
    font-weight: 100;
    border-radius: 50%;
  }
  /* activates the popup circle */
  #popup.active{
    visibility: visible;
    opacity: 1;
    transition: 0.2s;
  }

  /* controls table settings */
  table {
    width: 97%;
    text-align: center;
  }
  /* formatting for the table rows*/
  td {
    border: transparent;
    text-align: left;
    padding: 8px;
    color: #fff;
    font-family: "Helvetica"
  }
/* formatting for the table header */
  th {
    border: 1px solid #C0ECAD;
    text-align: left;
    padding: 8px;
    color: #fff;
    font-family: "Helvetica"
  }
  tr:nth-child {
    border: transparent;
  }

  /* formatting for the dropdown menu */
  .dropdown1 {
    position: relative;
    display: inline-block;
  }
  .dropdownbutton {
    background-color: transparent;
    width: 200px;
    opacity: 1.0;
    color: white;
    padding-left: 30px;
    padding-right: 30px;
    font-size: 25px;
    font-family: Orbitron;
    border-radius: 15px;
    border: 3px solid #C0ECAD;
  }
  .dropdown {
    position: relative;
    display: inline-block;
    z-index:999
  }
  .dropdown-content {
    display: none;
    position: absolute;
    opacity: 0.95;
  }
  .dropdown-content .a {
    opacity: 1.0;
    color: white;
    padding-left: -30px;
    padding-right: -30px;
    font-size: 18px;
    font-family: monospace;
    border-radius: 30px;
    border: 3px solid #C0ECAD;
    width: auto;
  }
  .dropdown-content .a:hover {background-color: darkgray;}
  .dropdown:hover .dropdown-content {display: block;}
  .dropdown:hover .dropdownbutton {background-color: darkgray;}


  /* controls the compartments of the grid layout */
  .item1 {
    grid-area: header;
    text-align: center;
    width: auto;
  }
  .item2 {
    grid-area: drop;
  }
  .item3 {
    grid-area: map;
  }
  .item4 {
    grid-area: history;
  }
  /* formatting for the grid design */
  .grid-container {
    display: grid;
    grid-template-areas:
      'header header header header header header'
      'drop drop map map map map'
      'history history history history history history';
    grid-gap: 8px;
    padding: 5px;
    overflow-x: auto;
  }
  .grid-container > div {
    text-align: center;
    padding: 20px 0;
  }

  .displaybox {
    padding: 20px 15px 12px 15px;
    width: 400px;
    border-radius: 25px;
    height: 350px;
    float: left;
    text-align: center;
    background-color: transparent;
    font-family: "Helvetica";
    font-weight: 100;
    color: #FFFFFF;
    overflow-y: hidden;
    border: 4px solid #C0ECAD;
  }
  .satbuttons {
    background: transparent;
    color: white;
    font-family: 'Orbitron';
    text-align: center;
    border-radius: 10px;
    border: 3px solid #C0ECAD;
  }
  .satbuttons:hover {
    /* background-color: lightgray; */
    box-shadow: 0 0 15px 0 #C0ECAD;
  }
  .active{
    background-color: #C0ECAD;
    color: black;
    box-shadow: 0 0 15px 0 #C0ECAD;
  }

  /* joined element nav menu option */
  /* .navmenu {
    padding: 10px 49px;
    background: #C0ECAD;
    color: black;
    font-weight: 100;
    font-family: 'Orbitron';
    font-size: 20px;
    text-align: center;
    border-left: 2px solid black;
  } */

  /* separate element nav menu option */
  .navmenu {
    padding: 10px 40.5px;
    background: transparent;
    color: white;
    font-weight: 100;
    font-family: 'Orbitron';
    font-size: 20px;
    text-align: center;
    border-radius: 10px;
    border: 3px solid #C0ECAD;
  }
  .navmenu:hover {
    box-shadow: 0 0 15px 0 #C0ECAD;
  }
  #wrapper {
      position:relative;
      margin-left: 20px;
  }
  #wrapper > div {
      float:left;
      margin-right: 15px; /* remove for joined element design */
  }
  input[name=content] {
      display:none;
  }
  input[name=content]:checked + label[class="navmenu"] {
      background: #C0ECAD;
      color: black;
  }

}
  </style>

<!--controls the browser cookie to store user's search history-->
  <script>
  function setCookie(name,value,days) {
      var expires = "";
      if (days) {
          var date = new Date();
          date.setTime(date.getTime() + (days*24*60*60*1000));
          expires = "; expires=" + date.toUTCString();
      }
      document.cookie = name + "=" + (value || "")  + expires + "; path=/";
  }
  function getCookie(name) {
      var nameEQ = name + "=";
      var ca = document.cookie.split(';');
      for(var i=0;i < ca.length;i++) {
          var c = ca[i];
          while (c.charAt(0)==' ') c = c.substring(1,c.length);
          if (c.indexOf(nameEQ) == 0) return c.substring(nameEQ.length,c.length);
      }
      return null;
  }

  function check(){
    var table = getCookie("person");
    if (table){
      alert("myTable");
    }
    else{
      setCookie("person", document.getElementById("myTable"), 2);
    }
  }
  </script>

<!--controls audio for the compute button-->
  <script>
  var bleep = new Audio();
  bleep.src = 'https://www.soundjay.com/button/sounds/beep-29.mp3';
  </script>


</head>

<body>

  <div class = "container" id="blur"> <!--places the website inside a container that can be blurred-->
   <div class = "content"> <!--identifies the contents of the container-->
     <div class="grid-container"> <!--places the contents into a grid layout-->
       <div class="item1"> <!--first section of the grid: header-->
         <span> <!--button display for satellite selection-->
           <a style="background-color: transparent; margin-left: -30px; margin-top: -20px; margin-bottom: -10px" href="#">
             <div id="myDIV">
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('ISS','25544');resetlatlong();"> <h2>ISS</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('GALILEO 26','43565');resetlatlong();"> <h2>GALILEO 26</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('YAOGAN-31 A','43275');resetlatlong();"> <h2>YAOGAN-31 A</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('CANX-6','32784');resetlatlong();"> <h2>CANX-6</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('STARLINK-1517','45787');resetlatlong();"> <h2>STARLINK-1517</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('DMC 3-FM3','40717');resetlatlong();"> <h2>DMC 3-FM3</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('COSMOS 2428','31792');resetlatlong();"> <h2>COSMOS 2428</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('NOAA 19','33591');resetlatlong();"> <h2>NOAA 19</h2> </button>
             <button class="satbuttons" style="width:150px;font-size:10px; margin-bottom:10px" onclick="titlesat('FOX-1A (AO-85)','40967');resetlatlong();"> <h2>FOX-1A (AO-85)</h2> </button>
             </div>
           </a>
         </span>
         <h1>Can I see the <!--header for the website and formatting-->
            <div class="dropdown1" style="margin-top: -50px;margin-bottom: -50px; ">
            <!--<button class="dropdownbutton">--><h1><span id="satname1"><!--</span></h1></button>-->
            <!--<div class="dropdown-content">
              <a class="a" style="background-color: black" href="#">
                <button style="width:175px; margin-bottom:10px" onclick="titlesat('ISS','25544');resetlatlong();"> <h2>ISS</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('GALILEO 26','43565');resetlatlong();"> <h2>GALILEO 26</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('YAOGAN-31 A','43275');resetlatlong();"> <h2>YAOGAN-31 A</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('CANX-6','32784');resetlatlong();"> <h2>CANX-6</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('STARLINK-1517','45787');resetlatlong();"> <h2>STARLINK-1517</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('DMC 3-FM3','40717');resetlatlong();"> <h2>DMC 3-FM3</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('COSMOS 2428','31792');resetlatlong();"> <h2>COSMOS 2428</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('NOAA 19','33591');resetlatlong();"> <h2>NOAA 19</h2> </button>
                <button style="width:175px;margin-bottom:10px" onclick="titlesat('FOX-1A (AO-85)','40967');resetlatlong();"> <h2>FOX-1A (AO-85)</h2> </button>
              </a>
            </div>-->
            </div> ?
         </h1>

         <br> <br> <br>

           <!-- elements pertaining to the navigation menu. series of radio buttons that control each "tab" -->
           <div id="wrapper" style="margin-top: -30px">
             <!-- instruction tab -->
             <div> <input type='radio' name='content' id='ins_content' checked='true' onclick="display()"/>
             <label for='ins_content' class="navmenu">INSTRUCTIONS</label> </div>

             <!-- satellite description tab  -->
             <div> <input type='radio' name='content' id='satdes_content' onclick="display()"/>
             <label for='satdes_content' class="navmenu">SATELLITE DESCRIPTION</label> </div>

             <!-- behind the scenes tab  -->
             <div> <input type='radio' name='content' id='bts_content' onclick="display()"/>
             <label for='bts_content' class="navmenu">BEHIND THE SCENES</label> </div>

             <!-- previous request tab -->
             <div> <input type='radio' name='content' id='prereq_content' onclick="display()"/>
             <label for='prereq_content' class="navmenu">PREVIOUS REQUEST</label> </div>
           </div>

       </div>

     <div class="item2"> <!--second section of the grid: infobox-->

       <!-- box that displays information of the opened tab  -->
       <div class='displaybox'>
             <!-- display content for the instructions -->
             <div id="instructions">
               <text style="font-size: 20px; font-family: 'Orbitron';"> INSTRUCTIONS </text> <br> <br>
               <text style="font-size: 14px;"> 1. Select a satellite at the top of the page. <br> <br>
                      2. Enter your location. This can be done through typing your location in the search bar,
                      manually entering your latitude and longitude, clicking a location on the map, or dragging
                      the map marker to your desired location. <br> <br>
                      3. If you enter a location in the search bar, compute will be automatically pressed. If you
                      manually enter your latitude and longitude or use the map to select a location, click the
                      “compute” button.  <br> <br>
                      4. View a description of your selected satellite under the “satellite description” tab. View
                      behind the scenes information for this page under the “behind the scenes” tab. View your most
                      recent request under the “previous request” tab. <br> </text>
             </div>

             <!-- display content for behind the scenes  -->
             <div id="behindthescenes" style="display:none">
               <text style="font-size: 20px; font-family: 'Orbitron';"> BEHIND THE SCENES </text>
               <img src="/Calc_FOV.gif" style = "width:300px; height:275px;" id ="rcornersimg">
             </div>

             <!-- display content for the satellite description  -->
             <div id="satellitedescription" style="display:none">
               <text style="font-size: 20px; font-family: 'Orbitron';"> SATELLITE DESCRIPTION </text> <br> <br>
               <text style="font-size: 14px;"> <span id="sat_desc"> </span> <br></text>
             </div>

             <!-- display content for the previous reqest tab  -->
             <div id="previousrequest" style="display:none">
               <text style="font-size: 20px; font-family: 'Orbitron';"> PREVIOUS REQUEST </text><br>
               <text style="font-size: 14px;">
                 <br>
                 <p><b>Date & Time: </b><span id="datetimeprint"></span> </p>
                 <div><p>
                    <b>Location of <span id="satnameprint"></span>:</b> <br>
                    Latitude: <span id="sat_latitudeprint"> </span>
                    <br>
                    Longitude: <span id="sat_longitudeprint"> </span> </p>
                 </div>
                 <p><b>Is it above me? </b> <span style="color:#C0ECAD; font-size: 14px" id="result_satprint"></span> </p>
                 <p><b>Weather Description: </b> <span id="cloud_descrip_print"></span> </p>
                 <p><b>Can I see it? </b> <span id="cloud_perc_print"></span> </p>
                 <p><b>Prediction: </b> <span id="satprediction1"></span </p>
                 <p><b>User latitude and longitude: </b> <span id="prev_position"></span> <br> </p>
               </text>
             </div>
       </div>

      <!-- styling option: tabs are displayed vertically and expand when hovered over -->
      <!-- <div class="grow">
          <text style="font-size: 20px; font-family: 'Orbitron';"> INSTRUCTIONS </text> <br> <br>
          <text style="font-size: 14px;"> 1. Select a satellite. Hover your mouse over “Select Satellite” (or if you have already selected one, the satellite name in title) to select a satellite. <br> <br>
                 2. Enter your location. This can be done through typing your location in the search bar, manually
                 entering your latitude and longitude, clicking a location on the map, or dragging the map marker to
                 your desired location. <br> <br>
                 3. Once your location is entered, click the “compute” button. <br></text>
      </div>

      <div style="margin-top: 10px;" class="grow">
        <text style="font-size: 20px; font-family: 'Orbitron';"> BEHIND THE SCENES </text>
        <img src="/Calc_FOV.gif" style = "width:250px; height:225px;" id ="rcornersimg">
      </div>

      <div style="margin-top: 10px;" class="grow">
          <text style="font-size: 20px; font-family: 'Orbitron';"> SATELLITE DESCRIPTION </text> <br> <br>
          <text style="font-size: 14px;"> <span id="sat_desc"> </span> <br></text>
      </div>

      <div style="margin-top: 10px;" class="grow">
        <text style="font-size: 20px; font-family: 'Orbitron';">     PREVIOUS REQUEST   </text> <br>
        <text style="font-size: 14px;">
          <br>
          <p><b>Date & Time: </b><span id="datetimeprint"></span> </p>
          <div><p>
             <b>Location of <span id="satnameprint"></span>:</b> <br>
             Latitude: <span id="sat_latitudeprint"> </span>
             <br>
             Longitude: <span id="sat_longitudeprint"> </span> </p>
          </div>
          <p><b>Is it above me? </b> <span style="color:#C0ECAD; font-size: 14px" id="result_satprint"></span> </p>
          <p><b>Weather Description: </b> <span id="cloud_descrip_print"></span> </p>
          <p><b>Can I see it? </b> <span id="cloud_perc_print"></span> </p>
          <p><b>User latitude and longitude: </b> <span id="prev_position"></span> <br> </p>
        </text>
      </div> -->

      <!-- display for the compute button -->
      <div style="margin-top: 10px;margin-right: 35px;" >
        <a class="a" style ="position:relative; width: 200px; font-size: 20px; font-family:'Helvetica'; font-weight:100;" href="#" onclick="bleep.play(); latlonginput(); toggle(); myFunction(); resetlatlong(); calc(); resetCounter(); counter(); reset(); markerPosition(); setTimeout(prediction,1000); setTimeout(clouds, 1000); computeZoom(); manualInfoWindow();">COMPUTE</a>
        <br><br><br>
      </div>

    </div>


    <div class="item3"> <!--third section of the grid: map-->
      <div> <!--search box for the location-->
        <input
           id="searchTextField"
           class="searchBox"
           type="search"
           placeholder="Enter a location">
      </div>
      <div> <!--input box for the latitude and longitude-->
        <input
          id="ulat"
          class="mapInputs"
          type="search"
          placeholder="Latitude">
        <input
          id="ulong"
          class="mapInputs"
          type="search"
          placeholder="Longitude">
      </div>
      <div id="map"> </div> <!--google maps-->

      <style>
      /* style and size setting for the google map */
      #map {
        height:600px;
        width:900px;
        margin-right: 30px;
      }
      </style>
    </div>


    <div class="item4"> <!--fourth section of the grid: history of requests-->
      <br><br>
      <div id="header2">
        HISTORY OF REQUESTS
      </div>
      <table id="myTable"> <!--inserts a table for history with the following headers-->
        <tr>
          <th>Date & Time: </th>
          <th>Satellite Location (Latitude, Longitude): </th>
          <th>User Location (Latitude, Longitude):</th>
          <th>Is it above me?</th>
          <th>Satellite Name:</th>
        </tr>
      </table>

      <br><br><br><br>
      <!-- stylistic moving satellite. when clicked opens a new tab with satellite game ("easter egg") -->
      <marquee behavior="alternate" direction="right" style="color: white"> <img src="https://media.giphy.com/media/LUfSlaXJyvARZsiJtA/giphy.gif" style="width:175px;height:175px;" onclick="window.open('game', '_blank');"></marquee>
      <br><br><br><br>
      <br><br>

      <footer>
        <div>
          <!-- display content for the footer -->
          <p style="float:right;margin-right:200px">Developed By: David Li, Katie Stadler, Renita John;&emsp;
            With Thanks To: Ned Rossman, Nadim El-Jaroudi;&emsp;
            And Sponsored By: The UVA DevHub</p>
            <!-- <div style="margin-left:170px;float:left;margin-top:10px;">
              <img src="https://i.ya-webdesign.com/images/space-invaders-alien-png.png" style = "width:30px; height:30px;" onclick="window.open('https://arcade.ly/games/space-invaders/', '_blank');">
            </div> -->
        </div>
      </footer>
    </div>
    </div>
    </div>
    </div>

    <script>
    var header = document.getElementById("myDIV");
    var btns = header.getElementsByClassName("satbuttons");
    for (var i = 0; i < btns.length; i++) {
      btns[i].addEventListener("click", function() {
      var current = document.getElementsByClassName("active");
      if (current.length > 0) {
        current[0].className = current[0].className.replace(" active", "");
      }
      this.className += " active";
      });
    }
    </script>


    <script>
        /* functiion that controls the display of the tabs. */
        function display() {
          var ins = document.getElementById('instructions'); // refers to instruction tab content
          var bts = document.getElementById('behindthescenes'); // refers to behind the scenes content
          var satd = document.getElementById('satellitedescription'); // refers to satellite description content
          var prevreq = document.getElementById('previousrequest'); // refers to previous request content

          /* series of if statements that determine which tab is selected. information
          for the selected tab is displayed, and information for the remaining tabs is hidden. */
          if (document.getElementById("ins_content").checked) { // instruction tab is selected
            // console.log("INS");
            ins.style.display = "block";
            bts.style.display = "none";
            satd.style.display = "none";
            prevreq.style.display = "none";
          }
          if (document.getElementById("bts_content").checked) { // behind the scenes tab is selected
            // console.log("BTS");
            bts.style.display = "block";
            satd.style.display = "none";
            prevreq.style.display = "none";
            ins.style.display = "none";
          }
          if (document.getElementById("satdes_content").checked) { // satellite description tab is selected
            // console.log("SD");
            satd.style.display = "block";
            bts.style.display = "none";
            prevreq.style.display = "none";
            ins.style.display = "none";
          }
          if (document.getElementById("prereq_content").checked) { // previous request tab is selected
            // console.log("PR");
            prevreq.style.display = "block";
            bts.style.display = "none";
            satd.style.display = "none";
            ins.style.display = "none";
          }
        }
    </script>

    <script>
    var sat_key;
    var satel;
    document.getElementById("satname1").innerHTML=" Select Satellite Above";
    document.getElementById("sat_desc").innerHTML="A satellite is any object that orbits in a curved path around a planet. The moon is one of the Earth’s natural satellites. Conventionally, the term “satellite” refers to a machine that is launched into space and orbits around Earth or another object in space. To learn more about specific satellites and your relation to these artificial space objects, please select a satellite. ";
    /*a function that takes user input based on the button selected and stores that information for use in adjusting api path and what the website displays*/
    function titlesat(sat_name,satel_id){
      satel=sat_name;
      document.getElementById("satname1").innerHTML=satel;
      document.getElementById("satname").innerHTML=satel;
      document.getElementById("satname2").innerHTML=satel;
      sat_key=satel_id;
      var satid_num =parseFloat(satel_id);
      if (satid_num ===25544){
        document.getElementById("sat_desc").innerHTML="The International Space Station is the result of a collaborative project built by Canada, Europe, Japan, Russia, and the United States. The spacecraft was designed to take advantage of its environment and conduct experiments in its numerous laboratories and research payloads that would help both life on earth and propel future space expeditions. Despite its large size, measuring in at more than 70 meters long, the space station has been inhabited by a small six person crew since November 2000 that constantly changes."
      } else if (satid_num ===43565){
        document.getElementById("sat_desc").innerHTML="The Galileo 26 is one of the most recent additions to the European Union’s planned total of 38 satellites in the Galileo series to increase its independence and influence in technology. The satellite was launched at the same time as three others -Galileo 23, 24, and 25- with the purpose to improve position, navigation, and timing systems. The Galileo satellites together are controlled by civilians and recognized as the most precise of positioning, navigation, and timing systems in the world."
      }else if (satid_num ===43275){
        document.getElementById("sat_desc").innerHTML="The Yaogan-31a is a remote sensing satellite launched by China in 2018. Its intent is to collect and monitor data on the Earth concerning the environment. Much about the Yaogan series of satellites, however, is unknown, including what equipment is used for its research."
      }else if (satid_num ===32784){
        document.getElementById("sat_desc").innerHTML="The CanX-6 is Canadian satellite that is small, and compact with a maximum of just 14 kg. It is used to track and monitor ships. Though the CanX-6 was originally intended to only last a few months at the time of launch, it surpassed expectations and is still in orbit and operational."
      }else if (satid_num ===45787){
        document.getElementById("sat_desc").innerHTML="The Starlink-1517 is a part of SpaceX’s Starlink “satellite constellation” with the intention of improving communication and internet. SpaceX intends to put thousands of Starlink satellites in the sky and the Starlink-1517 is just one of those. SpaceX also intends to sell some of these satellites for other purposes including exploration and research."
      }else if (satid_num ===40717){
        document.getElementById("sat_desc").innerHTML="The DMC 3-FM3 is the United Kingdom’s satellite which is a part of the DMC (Disaster Monitoring Constellation). It weighs around 447 kg and boasts an impressively high resolution imager (capable of taking black-and-white images with notably higher resolutions than its color images) that allows it to monitor disasters occurring on Earth."
      }else if (satid_num ===31792){
        document.getElementById("sat_desc").innerHTML="The Cosmos-2428 is a Russian intelligence satellite said to be the last of the Tselina-2 class satellites. "
      }else if (satid_num ===33591){
        document.getElementById("sat_desc").innerHTML="The NOAA 19 is a US satellite initially launched by NASA then given to the National Oceanic and Atmospheric Administration (NOAA). It collects a variety of meteorological data important for weather forecasting including: ocean surface temperature and atmospheric temperature."
      }else if (satid_num ===40967){
        document.getElementById("sat_desc").innerHTML="The Fox-1A is an amateur radio/communication satellite. It is rather small and not incredibly complicated. Though it does carry a student experiment on it. "
      }else{
        document.getElementById("sat_desc").innerHTML="Please select a satellite!";
      }
    }
    </script>

  <div id="popup"> <!--places the contents of the popup inside it and calls the variable information-->
     <p><b>Date & Time: </b><span id="datetime"></span></p>

      <div><p>
        <b>Location of <span id="satname"></span>:</b> <br>
        Latitude: <span id="sat_latitude"> </span>
        <br>
        Longitude: <span id="sat_longitude"> </span></p>
      </div>

      <p><b>Is it above me? </b><span style="color:#C0ECAD;" id="result_sat"></span></p>
      <p><b>Weather Description: </b><span id="cloud_descrip"></span></p>
      <p><b>Can I see it? </b> <span id=cloud_perc></span> </p>
      <p><b>Prediction: </b> <span id="satprediction"></span </p>
      <p><b>Time since last request for <span id="satname2"></span> position: </b><span id="count"> </span></p>
      <a class="a" href="#" onclick="toggleclose(); history(); setTimeout(addhistory, 1000)">Close</a> <!--inserts a close button to exit out of the popup and then creates history-->
  </div>

  <script type="text/javascript">
    function toggle(){
      if (sat_key == undefined) {
        bleep.pause();
        alert('Please select a satellite before pressing compute.');
      }
      else if (userlat == "" || userlong== "" || userlat == undefined || userlong == undefined) {
        bleep.pause();
        /* message pops up if the user has not inputted a location */
        alert('Please select, or reinput, a location before pressing compute.');
      }
      else if (userlat == "NV" || userlong == "NV") {
        /* message pops up if user as manually inputted an invalid latitude/longitude */
        alert('Please enter a latitude and longitude within the valid ranges. Latitude: -90 to 90. Longitude: -180 to 180.')
      }
      else if (userlat == "IV" || userlong == "IV") {
        /* message pops up if user has inputted an invalid address */
        alert('Please select or reinput a valid location.')
      }
      else{
        var blur = document.getElementById('blur');
        blur.classList.toggle('active');
        var popup = document.getElementById('popup');
        popup.classList.toggle('active');
        bleep.play();
      }
    }
    function toggleclose(){
      var blur = document.getElementById('blur');
      blur.classList.toggle('active');
      var popup = document.getElementById('popup');
      popup.classList.toggle('active');
    }
  </script>

  <script>
    var maplat; // describes the latitude pulled from the google map
    var maplong; // describes the longitude pulled from the google map
    var marker; // describes the google map marker
    var map; // describes the google map
    var infowindow; // describes the marker's infowindow
    /* function that initializes the google map, google autocomplete search bar,
    and the google map marker. takes no parameters. */
    function initMap() {
      var latlong = new google.maps.LatLng(38.031078, -78.512772); // default location for google map marker
      var options = {
        zoom: 12,
        center: latlong
      }
      // creating the map
      map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 38.031078, lng: -78.512772},
      zoom: 4,
      /* following style section displays the map in "dark mode." featureType refers
      features of the map. elementType is a subdivision of featureType. */
      styles: [
        {elementType: 'geometry', stylers: [{color: '#242F3E'}]},
        {elementType: 'labels.text.stroke', stylers: [{color: '#242F3E'}]},
        {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
        {
          featureType: 'administrative.locality',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'poi',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'poi.park',
          elementType: 'geometry',
          stylers: [{color: '#263C3F'}]
        },
        {
          featureType: 'poi.park',
          elementType: 'labels.text.fill',
          stylers: [{color: '#6B9A76'}]
        },
        {
          featureType: 'road',
          elementType: 'geometry',
          stylers: [{color: '#38414E'}]
        },
        {
          featureType: 'road',
          elementType: 'geometry.stroke',
          stylers: [{color: '#212A37'}]
        },
        {
          featureType: 'road',
          elementType: 'labels.text.fill',
          stylers: [{color: '#9CA5b3'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'geometry',
          stylers: [{color: '#746855'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'geometry.stroke',
          stylers: [{color: '#1F2835'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'labels.text.fill',
          stylers: [{color: '#F3D19C'}]
        },
        {
          featureType: 'transit',
          elementType: 'geometry',
          stylers: [{color: '#2F3948'}]
        },
        {
          featureType: 'transit.station',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'water',
          elementType: 'geometry',
          stylers: [{color: '#17263C'}]
        },
        {
          featureType: 'water',
          elementType: 'labels.text.fill',
          stylers: [{color: '#515C6D'}]
        },
        {
          featureType: 'water',
          elementType: 'labels.text.stroke',
          stylers: [{color: '#17263C'}]
        }
      ]
    });

      var input = document.getElementById('searchTextField'); // user input from the google autocomplete search bar
      var manualLat = document.getElementById('ulat'); // manual latitude input
      var manualLng = document.getElementById('ulong'); // manual longitude input

      // initializing an empty infowindow
      infowindow = new google.maps.InfoWindow({
        content: ''
      });

      /* placing the latitude/longitude input boxes at the top left of the map */
      map.controls[google.maps.ControlPosition.LEFT_TOP].push(manualLat);
      map.controls[google.maps.ControlPosition.LEFT_TOP].push(manualLng);

      /* placing the google search bar at the top of the map */
      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);

      var autocomplete = new google.maps.places.Autocomplete(input); // controls the google autcomplete search bar
      autocomplete.bindTo('bounds', map); // binds the search bar to the bounds of the map

      // initalizing google map marker
      marker = new google.maps.Marker({
        position: latlong,
        map: map,
        draggable: true, // user can freely drag the marker around the map
        animation: google.maps.Animation.DROP // marker drops onto the screen
      });

      /* listener that controls the google autocomplete search bar. entering a valid location in
      the search bar is equivalent to pressing the compute button. */
      autocomplete.addListener('place_changed', function() {
        infowindow.close(); // ensuring that any open infowindow is closed
        var place = autocomplete.getPlace(); // retrieving the inputted address

        /* if the user enters an unknown address into the google autocomplete
        search bar an invalid address message will print */
        if (!place.geometry) {
          userlat = "IV";
          userlong = "IV";
          prevlat = "";
          prevlong = "";
        }
        /* setting the bounds of the map according to user input and placing the
        marker at the user's provided address */
        map.fitBounds(place.geometry.viewport);
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        prevlat = userlat;
        prevlong = userlong;

        /* inputted address and corresponding latitude and longitude. displayed in the infowindow */
        var requestInfo = "<b>Address: </b>" + input.value + ". <br>" + "<b>Latitude: </b>" + userlat + ", <br>" + "<b>Longitude: </b>" + userlong;

        infowindow.setContent(requestInfo); // setting the content of the infowindow to the user address and latitude/longitude
        // same functions as compute button
        latlonginput(); toggle(); myFunction(); resetlatlong(); calc(); resetCounter(); counter(); reset(); markerPosition(); setTimeout(prediction,1000); setTimeout(clouds, 1000); computeZoom();

        infowindow.open(map,marker); // opening the infowindow
      });

      /* allows the user to select a place on the map by clicking on the map */
      google.maps.event.addListener(map, 'click', function(event) {
        infowindow.close();
        placeMarker(event.latLng); // placing the marker where the user clicks
        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        prevlat = userlat;
        prevlong = userlong;
      });

      /* allows the user to select a place on the map by dragging the google map marker*/
      google.maps.event.addListener(marker, 'dragend', function() {
        infowindow.close();
        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        prevlat = userlat;
        prevlong = userlong;
      });

      /* function that takes a location and places a marker on the location */
      function placeMarker(location) {
        /* if a marker has not yet been created then a new marker is created and
        placed at the given loaction */
        if (marker == undefined) {
          marker = new google.maps.Marker({
            position: location,
            map: map,
            animation: google.maps.Animation.DROP,
          });
        } else {
          infowindow.close();
          /* if a marker has already been created then the marker's location is
          moved to the provided location */
          marker.setPosition(location);
          userlat = marker.getPosition().lat(); // setting the user latitude to the marker's latitude
          userlong = marker.getPosition().lng(); // setting the user longitude to the marker's longitude
          prevlat = userlat;
          prevlong = userlong;

          /* checks to ensure the latitude and longitude are correctly assigned */
          console.log("TEST LAT: " + marker.getPosition().lat() + " check equals " + userlat);
          console.log("TEST LONG: " + marker.getPosition().lng() + " check equals " + userlong);
        }
        map.setCenter(location); // centering the map on the provided location
      }
    }

    /* function that opens an infowindow if the user manually enters latitude and longitude */
    function manualInfoWindow() {
      if (userlat !== "" && userlong !== "" && userlat !== undefined && userlong !== undefined && !isNaN(userlat) && !isNaN(userlong)) {
        var requestInfo = "<b>Latitude: </b>" + parseFloat(userlat) + ", <br>" + "<b>Longitude: </b>" + parseFloat(userlong);
        infowindow.setContent(requestInfo);
        infowindow.open(map, marker);
      }
    }

    /* function that resets the maplat and maplong variables. this function also
    resets the google autocomplete search bar everytime the compute button is clicked. */
    function reset() {
      infowindow.close();
      maplat = "";
      maplong = "";
      document.getElementById('searchTextField').value = "";
      document.getElementById('ulat').value = "";
      document.getElementById('ulong').value = "";
    }

    /* function that centers the marker/map around the user latitude and longitude. */
    function markerPosition() {
      /* if the user inputs latitude and longitude (the userlat and userlong variables
      are not empty) then the marker/map center around the provided latitude/longitude */
      if (userlat && userlong) {
        infowindow.close();
        // creating a google LatLng object
        myLatLng = new google.maps.LatLng({lat: parseFloat(userlat), lng: parseFloat(userlong)});
        marker.setPosition(myLatLng);
        map.setCenter(myLatLng);
        map.setZoom(5);
      }
    }

    /* function that sets the map zoom every time compute is pressed */
    function computeZoom() {
      map.setZoom(10);
    }

  </script>

  <!-- calling the google map api -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCT6pTAuib-JSgt6j1obhJsrcbPm_dxt1s&libraries=places&callback=initMap" async defer>
  </script>
  <br>

  <script>
  var prevlat; // describes the user's previously inputted latitude
  var prevlong; // describes the user's previously inputted longitude
  var userlat; // describes the user's latitude
  var userlong; // describes the user's longitude
  var inputLat = ""; // describes the manually inputted latitude
  var inputLong = ""; // describes the manually inputted longitude
  var result; // describes the combined user latitude and longitude
  /* function that controls the manual input of latitude and longitude. displays
  inputted values on the screen and controls user input. */
  function latlonginput() {
    inputLat = document.getElementById('ulat').value; // pulling user latitude from input box
    inputLong = document.getElementById('ulong').value; // pulling user longitude from input box
    // executes if the input textboxes contain data
    if (inputLat !== "" && inputLong !== "") {
      /* executes if the user inputs number data into text fields */
      if (!isNaN(inputLat) || isNaN(!inputLong)) {
        // ensuring that the inputted values within the valid ranges
        if ((parseFloat(inputLat) > -91 && parseFloat(inputLat) < 91) && (parseFloat(inputLong) > -181 && parseFloat(inputLong) < 181)) {
          userlat = inputLat; // setting user latitude equal to the inputted value
          userlong = inputLong; // setting user longitude equal to the inputted value
          result = parseFloat(userlat) + ", " + parseFloat(userlong);
          prevlat = userlat;
          prevlong = userlong;
          /* reseting the input boxes after compute is pressed */
          document.getElementById('ulat').value = "";
          document.getElementById('ulong').value = "";
        }
        else {
          userlat = "NV"; // user entered a non-valid (NV) latitude
          userlong = "NV"; // user entered a non-valid (NV) longitude
          prevlat = "";
          prevlong = "";
        }
      }
    }
    /* executes if compute is pressed and either input box is empty */
    else if (inputLat == "" || inputLong == "") {
      userlat = inputLat;
      userlong = inputLong;

      if (userlat == "" || userlong== "" || userlat == undefined || userlong == undefined) {
        console.log(prevlat + " " + prevlong + " TESTING");
        if (prevlat != undefined && !isNaN(prevlat) && prevlong != undefined && !isNaN(prevlong) && prevlat != "" && prevlong != "") {
          userlat = prevlat;
          userlong = prevlong;
        }
      }
    }
  }
  </script>

  <!--function to get the time when the compute button is clicked-->
  <script>
  var date;
  function myFunction() {
    var dt = new Date();
    date = (("0"+dt.getDate()).slice(-2)) +"/"+ (("0"+(dt.getMonth()+1)).slice(-2)) +"/"+ (dt.getFullYear()) +" "+ (("0"+dt.getHours()).slice(-2)) +":"+ (("0"+dt.getMinutes()).slice(-2));
    document.getElementById("datetime").innerHTML = date;
  }
  </script>

  <!--function to keep a counter of the number of seconds that have elapsed since compute button was pressed-->
  <script>
  var count = null;
  function counter(){
   var i = 0;
   count = setInterval(() => {
     document.getElementById("count").innerHTML = i;
     i+=1;
   }, 1000);
  }
  /* resets the counter everytime compute is pressed */
  function resetCounter() {
    clearInterval(count);
  }
 </script>

    <!--creates a table that then adds rows with the following variables updated-->
    <script>
    function addhistory() {
      var table = document.getElementById("myTable");
      var row = table.insertRow(1);
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      var cell4 = row.insertCell(3);
      var cell5 = row.insertCell(4);
      cell1.innerHTML = date;
      cell2.innerHTML = satlat + ", " + satlong;
      cell3.innerHTML = result;
      cell4.innerHTML = result_sat;
      cell5.innerHTML = satel;
    }
    </script>

</body>

<script>
  var satlat;
  var satlong;
  var result_sat;
  /*a function that clears/resets the values for several defined elements*/
  function resetlatlong(){
  document.getElementById("sat_longitude").innerHTML = "";
  document.getElementById("sat_latitude").innerHTML = "";
  document.getElementById("result_sat").innerHTML = "";
  document.getElementById("cloud_perc").innerHTML = "";
  document.getElementById("cloud_descrip").innerHTML= "";
  document.getElementById("satprediction").innerHTML= "";
  }
  /* a function that fetches information about the selected satellites location then calculates (based on the formula for a cirlce) whether or not that satellite is "above" the user*/
  function calc(){
  fetch("https://www.n2yo.com/rest/v1/satellite/positions/"+sat_key+"/"+userlat+"/"+userlong+"/0/1/&apiKey=UG67VU-3MRS33-SWNLRM-4I6R").then(r => r.json()).then(data => {

  var long = data.positions[0].satlongitude;
  var lat = data.positions[0].satlatitude;

  satlat = lat.toFixed(4);
  satlong = long.toFixed(4);
  document.getElementById("sat_latitude").innerHTML = satlat;
  document.getElementById("sat_longitude").innerHTML = satlong;
  // document.getElementById("sat_longitude").innerHTML = long.toFixed(4);
  // document.getElementById("sat_latitude").innerHTML = lat.toFixed(4);

  const earthradkm = 6371
  var satalt = data.positions[0].sataltitude;
  var distkmarc = earthradkm*Math.acos(earthradkm/(earthradkm+satalt))
  var degreesdist = distkmarc*1000*0.0001/11.1

  var ulong = userlong;
  var ulat = userlat;
  console.log("Cheking latitude: " + ulat);
  console.log("Checking longitude: " + ulong);
  var num_long = parseFloat(long);
  var num_lat = parseFloat(lat)
  var num_ulong = parseFloat(ulong)
  var num_ulat = parseFloat(ulat)
  var x_cir = num_long - num_ulong
  var y_cir = num_lat - num_ulat
  var visioncheck = Math.pow(x_cir,2) + Math.pow(y_cir,2)
  if (visioncheck<=Math.pow(degreesdist.toFixed(4),2)){
    result_sat = "Yes";
    visiblevar = true
    document.getElementById("result_sat").innerHTML = result_sat;
  }else{
    result_sat = "No";
    visiblevar = false
    document.getElementById("result_sat").innerHTML = result_sat;
  }
})
}

  var cloudy_desc;
  var cloudy;
  var light;
  var mid;
  var heavy;
  /*a function that fetches weather data for a user's location from a weather api and then stores a statement on satellite visibility based on the the what is in the api's response*/
  function clouds(){
    fetch("https://api.openweathermap.org/data/2.5/weather?lat="+userlat+"&lon="+userlong+"&appid=658295ed6de928f64794e23ee97cab06").then(r_weath => r_weath.json()).then(data_weath => {
        cloudy_desc = data_weath.weather[0].description;
        cloudy = data_weath.clouds.all;
        document.getElementById("cloud_descrip").innerHTML = cloudy_desc;
        if(cloudy<=33&&visiblevar===true){
          light = "There is likely light to no cloud coverage in your area, so the "+ satel + " should be visible.";
          document.getElementById("cloud_perc").innerHTML = light;
      }else if(cloudy<=33&&visiblevar===false){
        light = "There is likely light to no cloud coverage in your area, but the "+ satel + " is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = light;
      }else if (cloudy<=66&&visiblevar===true){
        mid = "There is likely mid to heavy cloud coverage in your area, so the "+ satel + " may be visible between clouds.";
        document.getElementById("cloud_perc").innerHTML = mid;
      }else if (cloudy<=66&&visiblevar===false){
        mid = "There is likely mid to heavy cloud coverage in your area, and the "+ satel + " is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = mid;
      }else if (cloudy>66&&visiblevar===true){
        heavy = "There is likely mid to heavy cloud coverage in your area, but your view of the "+ satel + " is likely impeded by cloud cover.";
        document.getElementById("cloud_perc").innerHTML = heavy;
      }else{
        heavy = "There is likely very heavy cloud coverage in your area, and the "+ satel + " is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = heavy;
      }
    })
  }
  /*function that fetches for prediction on next pass from satellite*/
  function prediction() {
    fetch("https://www.n2yo.com/rest/v1/satellite/visualpasses/"+sat_key+"/"+userlat+"/"+userlong+"/0/1/120/&apiKey=UG67VU-3MRS33-SWNLRM-4I6R").then(r_prediction => r_prediction.json()).then(data_prediction =>{
      checkpass = data_prediction.info.passescount
      if (checkpass == 0){
        var nopassresp= "The "+ satel + " likely won't be visible in the next 24 hours."
        document.getElementById("satprediction").innerHTML = nopassresp
        document.getElementById("satprediction1").innerHTML = nopassresp
      }else{
      var next_pass = data_prediction.passes[0].startUTC
      var duration = data_prediction.passes[0].duration
      var round_duration = Math.round(duration/60)
      if (round_duration<60){
        round_units = " minutes."
      }else{
        round_duration = Math.round(round_duration/60)
        round_units = " hours."
      }
      return fetch("https://api.timezonedb.com/v2.1/get-time-zone?key=R1DH3OEUP6QS&format=json&by=position&lat=38&lng=-78&time="+next_pass).then(r_unix => r_unix.json()).then(data_unix =>{
          hour_np=data_unix.formatted.slice(11,13)
          minute_np=data_unix.formatted.slice(14,16)
          hour_np=parseInt(hour_np)
          if(hour_np==12){
            halftime = " p.m."
          }else if(hour_np==0){
            hour_np = 12
            halftime = " a.m."
          }else if (0<hour_np<12){
            halftime = " a.m."
          }else if(hour_np>12){
            hour_np = hour_np-12
            halftime = " p.m."
          }else{
          }
          p_dm =data_unix.formatted.slice(5,7)
          p_day =data_unix.formatted.slice(8,10)
          if (p_dm == "01"){p_dm="January";}else if (p_dm == "02"){p_dm="February";}else if (p_dm == "03"){p_dm="March";}else if (p_dm == "04"){p_dm="April";}else if (p_dm == "05"){p_dm="May";}
          else if (p_dm == "06"){p_dm="June";}else if (p_dm == "07"){p_dm="July";}else if (p_dm == "08"){p_dm="August";}else if (p_dm == "09"){p_dm="September";}else if (p_dm == "10"){p_dm="October";}
          else if (p_dm == "11"){p_dm="November";} else {p_dm="December";}
           var satpredicresponsepass = "We predict the " +satel+ " may next be visible at around " + hour_np+":"+minute_np + halftime+" on "+p_dm+ " "+p_day+"th (EST) for about " +round_duration + round_units
           document.getElementById("satprediction").innerHTML = satpredicresponsepass
           document.getElementById("satprediction1").innerHTML = satpredicresponsepass
        })
        }
    })
  }
  /* function that controls previous request information. contains information from
  the popup window displayed in the previous request section. */
  function history() {
    document.getElementById("datetimeprint").innerHTML = date; // display date
    document.getElementById("satnameprint").innerHTML = satel;
    document.getElementById("sat_latitudeprint").innerHTML = satlat; // display satellite latitude
    document.getElementById("sat_longitudeprint").innerHTML = satlong; // display satellite longitude
    document.getElementById("result_satprint").innerHTML = result_sat; // whether or user is below satellite
    document.getElementById("cloud_descrip_print").innerHTML = cloudy_desc; // weather description
    /* determines whether or not user can see satellite with weather consideration */
    if (light) {
      document.getElementById("cloud_perc_print").innerHTML = light;
    }
    else if (mid) {
      document.getElementById("cloud_perc_print").innerHTML = mid;
    }
    else if (heavy) {
      document.getElementById("cloud_perc_print").innerHTML = heavy;
    }
    document.getElementById("prev_position").innerHTML = result;
  }

</script>

</html>
