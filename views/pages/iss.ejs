<!DOCTYPE html>
<html>
<head>
<link href="https://fonts.googleapis.com/css2?family=Orbitron:wght@500&display=swap" rel="stylesheet">
<style>
html {
  max-width: 100%;
  overflow-x: hidden;
}
/* title of the page */
h1 {
    text-align: center;
    font-size: 60px;
    color: white;
    text-shadow: 5px 5px 3px #999;
    font-family: 'Orbitron', sans-serif;
}
/* button that controls basic functions including user relation to space objects */
.compute button {
  background-color: transparent;
  border: 3px solid #C0ECAD;
  border-radius: 50px;
  color: white ;
  padding: 10px 24px;
  cursor: pointer;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  font-family: "Helvetica";
  font-weight: bold;
}
.compute button:hover {
  background-color: gray;
}

/* general features of the background */
body {
  /* background image is copyright free */
  background: url(https://images.unsplash.com/photo-1587465511660-05c929e0e874?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1651&q=80);
  background-size: cover;
  background-attachment: fixed;
  text-align: center;
}

/**/
label {
  font-size: 16px;
}

/**/
input[type=text] {
  background-color: transparent;
  color: white;
  border-radius: 50px;
}

/**/
p {
  color: white;
}

/**/
.textbox {
  font-family: "Helvetica";
  font-weight: 100;
  margin: 1px 10 10 30px;
  background: transparent;
  width: 800px;
  height: 150px;
  margin:0 auto;
  text-align: center;
  color: white;
  /* border: 8px double #C0ECAD; */
}

/**/
#header2 {
  border-radius: 50px;
  opacity: 100;
  height: 50px;
  width: 600px;
  margin:0 auto;
  margin-right: 400px;
  margin-top: 50px;
  text-align: center;
  color: white;
  font-size: 30px;
  font-family: 'Orbitron', sans-serif;
  text-shadow: 2px 2px 2px #999;
  float: right;
}

/**/
#rcornersimg {
  border-radius: 50px;
  background: black;
  border: 9px double #484E5E;
  width: 500px;
  height: 500px;
  margin: 20px auto 50px auto;
  text-align: center;
  color: white;
  padding: 0 auto;
}

/**/
.footer {
   left:0; bottom:0; right:0;
   width: 100%;
   background-color: gray;
   opacity: 0.7;
   color: white;
   text-align: center;
   font-family: "Helvetica";
   font-weight: 100;
   margin-top: 100px;
}

.searchBox {
  background-color: #FFFFFF;
  border-radius: 25px;
  border: 1px solid;
  border-color: white;
  margin: 15px 10px 10px 30px;
  width: 400px;
  height: 20px;
  font-size: 18px;
  font-family: "Helvetica";
  font-weight: 100;
  padding: 16px 15px 15px 15px;
  position: absolute;
}

.mapInputs {
  background-color: #FFFFFF;
  border-radius: 25px;
  border: 1px solid;
  border-color: white;
  margin: 7px 5px 5px 10px;
  width: 170px;
  height: 27px;
  font-size: 15px;
  font-family: "Helvetica";
  font-weight: 100;
  padding: 5px 5px 5px 10px;
  position: absolute;
}

.grow {
  float:right;
  padding: 20px 15px 12px 15px;
  border-radius: 25px;
  height: 30px;
  width: 22%;
  margin-right: 30px;
  margin-left: 40px;
  float: left;
  transition:height 0.5s;
  text-align: center;
  background-color: transparent;
  font-family: "Helvetica";
  font-weight: 100;
  color: #FFFFFF;
  overflow-y: hidden;
  border: 4px solid #C0ECAD;
}
.grow:hover {
  height: 280px;
}
.circletext {
   border-radius: 50%;
   background: #3F4457;
   opacity: 0.7;
   width: 375px;
   height: 300px;
   text-align: center;
   font-size: 13px;
   font-family: "Helvetica";
   font-weight: 100;
   color: #FFFFFF;
   line-height: 16px;
   margin-top: 25px;
   margin-left: 10px;
   float:left;
   padding-top: 50px;
   padding-left: 20px;
   padding-right: 20px;
}

.buttoncomp{
  align-self: center;
  /* padding: 20px 15px 12px 15px; */
  width: 20%;
  margin: 0px 10px 25px 20px;
  float: left;
  transition:height 0.5s;
  text-align: center;
  background-color: transparent;
  font-family: "Helvetica";
  font-weight: 100;
  color: #FFFFFF;
  margin-right: 10px;
}

/**/
.container{
  position: relative;
  width: 100%;
  min-height: 100vh;
  justify-content: center;
  align-items: center;
  transition:0.3s;
  padding: 20px;
}
.container#blur.active{
    filter: blur(15px);
    pointer-events: none;
    user-select: none;
}
.container.content{
  position: relative;
  max-width: 800px;
}

/**/
/* .compbutton {
  position:relative;
  padding: 10px 24px;
  display: inline-block;
  margin-top:20px;
  text-decoration: none;
  background-color: transparent;
  border-radius: 50px;
  color: white;
  cursor: pointer;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  font-family: "Helvetica";
  border: 3px solid #C0ECAD;
} */
.a {
  position: relative;
  border-radius:
  padding: 10px 24px;
  display: inline-block;
  margin-top:20px;
  text-decoration: none;
  background-color: transparent;
  border: 3px solid #C0ECAD;
  border-radius: 50px;
  color: white ;
  padding: 10px 24px;
  cursor: pointer;
  box-shadow: 0 4px 8px 0 rgba(0, 0, 0, 0.2), 0 6px 20px 0 rgba(0, 0, 0, 0.19);
  font-family: "Helvetica";
}
.a:hover{
    background-color: lightgray;
}
/* .compbutton:hover {
  background-color: lightgray;
} */

/**/
#popup{
  position: fixed;
  top: 50%;
  left: 50%;
  transform: translate(-50%,-50%);
  width: 400px;
  padding:50px;
  box-shadow: 0 5px 30px rgba(0,0,0,.30);
  background: #3F4457;
  visibility: hidden;
  opacity: 1;
  transition: 0.5s;
  color: black;
  border: 9px double #C0ECAD;
  font-family: "Helvetica";
  font-weight: 100;
  border-radius: 50%;
}
#popup.active{
  visibility: visible;
  opacity: 1;
  transition: 0.2s;
}

table {
  width: 97%;
  text-align: center;
}

td{
  border: transparent;
  text-align: left;
  padding: 8px;
  color: #fff;
  font-family: "Helvetica"
}
th{
  border: 1px solid #C0ECAD;
  text-align: left;
  padding: 8px;
  color: #fff;
  font-family: "Helvetica"
}
}

tr:nth-child{
  border: transparent;
}

/**/
.dropdownbutton {
  background-color: transparent;
  width: 600px;
  opacity: 1.0;
  color: white;
  padding-left: 30px;
  padding-right: 30px;
  font-size: 18px;
  font-family: monospace;
  border-radius: 30px;
  border: 3px solid #C0ECAD;
}
.dropdown {
  position: relative;
  display: inline-block;
  z-index:999
}
.dropdown-content {
  display: none;
  position: absolute;
  opacity: 0.95;

}
.dropdown-content .a {
  opacity: 1.0;
  color: white;
  padding-left: -30px;
  padding-right: -30px;
  font-size: 18px;
  font-family: monospace;
  border-radius: 30px;
  border: 3px solid #C0ECAD;
  width: 550px;
}
.dropdown-content .a:hover {background-color: darkgray;}
.dropdown:hover .dropdown-content {display: block;}
.dropdown:hover .dropdownbutton {background-color: darkgray;}

</style>
</head>

<body>

  <div class = "container" id="blur">
   <div class = "content">

     <h1>Can I see the
        <div class="dropdown">
        <button class="dropdownbutton"><h1><span id="satname1"></span></h1></button>
        <div class="dropdown-content">
          <a class="a" style="background-color: black" href="#">
            <button style="width:175px" onclick="titlesat('ISS','25544');resetlatlong();"> <h2>ISS</h2> </button>
            <button style="width:175px" onclick="titlesat('GALILEO 26','43565');resetlatlong();"> <h2>GALILEO 26</h2> </button>
            <button style="width:175px" onclick="titlesat('YAOGAN-31 A','43275');resetlatlong();"> <h2>YAOGAN-31 A</h2> </button></a>
        </div>
        </div> ?
     </h1>

      <script>
      var sat_key
      document.getElementById("satname1").innerHTML="Select Satellite";
      document.getElementById("sat_desc").innerHTML="Please select a satellite!";
      function titlesat(sat_name,satel_id){
      var satel=sat_name;
      document.getElementById("satname1").innerHTML=satel;
      document.getElementById("satname").innerHTML=satel;
      document.getElementById("satname2").innerHTML=satel;
      document.getElementById("satnameprint").innerHTML=satel;
      sat_key=satel_id;
      var satid_num =parseFloat(satel_id);
      if (satid_num ===25544){
        document.getElementById("sat_desc").innerHTML="The International Space Station is the result of a collaborative project built by Canada, Europe, Japan, Russia, and the United States. The spacecraft was designed to take advantage of its environment and conduct experiments in its numerous laboratories and research payloads that would help both life on earth and propel future space expeditions. Despite its large size, measuring in at more than 70 meters long, the space station has been inhabited by a small six person crew since November 2000 that constantly changes."
      } else if (satid_num ===43565){
        document.getElementById("sat_desc").innerHTML="The Galileo 26 is one of the most recent additions to the European Union’s planned total of 38 satellites in the Galileo series to increase its independence and influence in technology. The satellite was launched at the same time as three others -Galileo 23, 24, and 25- with the purpose to improve position, navigation, and timing systems. The Galileo satellites together are controlled by civilians and recognized as the most precise of positioning, navigation, and timing systems in the world."
      }else if (satid_num ===43275){
        document.getElementById("sat_desc").innerHTML="The Yaogan-31a is a remote sensing satellite launched by China in 2018. Its intent is to collect and monitor data on the Earth concerning the environment. Much about the Yaogan series of satellites, however, is unknown, including what equipment is used for its research."
      }else{
        document.getElementById("sat_desc").innerHTML="Please select a satellite!";
      }
      }
      </script>

      <div class="grow">
          <text style="font-size: 20px; font-family: 'Orbitron';"> INSTRUCTIONS </text> <br> <br>
          <text style="font-size: 14px;"> 1. Select a satellite. Hover your mouse over “Select Satellite” (or if you have already selected one, the satellite name in title) to select a satellite. <br> <br>
                 2. Enter your location. This can be done through typing your location in the search bar, manually
                 entering your latitude and longitude, clicking a location on the map, or dragging the map marker to
                 your desired location. <br> <br>
                 3. Once your location is entered, click the “compute” button. <br></text>
      </div>


      <div>
        <input
           id="searchTextField"
           class="searchBox"
           type="search"
           placeholder="Enter a location">
      </div>
      <div>
        <input
          id="ulat"
          class="mapInputs"
          type="search"
          placeholder="Latitude">
        <input
          id="ulong"
          class="mapInputs"
          type="search"
          placeholder="Longitude">
      </div>
      <div id="map"> </div>

      <style>
      /* style and size setting for the google map */
      #map {
        height:600px;
        width:66%;
        float:right;
        margin-right: 40px;
      }
      </style>

      <div style="margin-top: 10px;" class="grow">
        <text style="font-size: 20px; font-family: 'Orbitron';"> BEHIND THE SCENES </text>
        <img src="/Calc_FOV.gif" style = "width:250px; height:225px;" id ="rcornersimg">
      </div>

      <div style="margin-top: 10px;" class="grow">
          <text style="font-size: 20px; font-family: 'Orbitron';"> SATELLITE DESCRIPTION </text> <br> <br>
          <text style="font-size: 14px;"> <span id="sat_desc"> </span> <br></text>
      </div>

      <div style="margin-top: 10px;" class="grow">
        <text style="font-size: 20px; font-family: 'Orbitron';"> PREVIOUS REQUEST </text> <br>
        <text style="font-size: 14px;">
        <p><b>Date & Time: </b><span id="datetimeprint"></span> </p>
         <div><p>
           <b>Location of <span id="satnameprint"></span>:</b> <br>
           Latitude: <span id="sat_latitudeprint"> </span>
           <br>
           Longitude: <span id="sat_longitudeprint"> </span> </p>
         </div>
         <p><b>Is it above me? </b> <span style="color:#C0ECAD; font-size: 14px" id="result_satprint"></span> </p>
         <p><b>Weather Description: </b> <span id="cloud_descrip_print"></span> </p>
         <p><b>Can I see it? </b> <span id="cloud_perc_print"></span> </p>
         <!-- <p><b>Time since last request for <span id="satname2"></span> position: </b><span id="count"> </span> </b> </p> -->
         <p><b>User latitude and longitude: </b> <span id="prev_position"></span> <br> </p>
         </text>
      </div>


      <div class="buttoncomp">
        <!-- <form>
          <br>
          <br>
          manual input box for user latitude
          <label>Latitude:</label>
          <input type="text" id="ulat"/>
          &emsp;
          manual input box for user longitude
          <label>Longitude:</label>
          <input type="text" id="ulong"/>
          &emsp;
        </form> -->
          <a class="a" style = "position:relative; left:47px; width: 200px; font-size: 20px; margin-top: 25px;" href="#" onclick="latlonginput(); toggle(); myFunction(); resetlatlong(); calc(); resetCounter(); counter(); reset(); markerPosition();  setTimeout(clouds, 1000); computeZoom(); manualInfoWindow();">COMPUTE</a>
          <br><br><br>
      </div>
      <div style="float:right; position:relative; bottom: 10px;left:100px; margin-right: 200px;" class = "textbox">
          <p  id="comp"></p>
      </div>

      <!--
      <table>
        <tr>
          <th>Date&Time: </th>
          <th>Satellite Location: </th>
          <th>User Location:</th>
          <th>Can I see it?</th>
        </tr>
        <tr>
          <td><span id="d&t"></td>
          <td><span id="slat&long"></td>
          <td><span id="ulat&long"></td>
          <td><span id="visible"></td>
        </tr>

      </table>
      -->

      <table id="myTable">
        <tr>
          <th>Date & Time: </th>
          <th>Satellite Location: </th>
          <th>User Location:</th>
          <th>Is it above me?</th>
        </tr>
      </table>

      <br><br><br><br>
      <br><br><br><br>
      <br>

      <br><br>
      <br><br>
        <div style = "position: absolute; bottom: -750px", class="footer">
          <p style="margin-right:200px;float:right;">Coded By: David Li, Katie Stadler, Renita John;&emsp;
          With Thanks To: Ned Rossman, Nadim El-Jaroudi;&emsp;
          And Sponsored By: The UVA DevHub</p>
          <!-- <div style="margin-left:150px;float:left;">
            <img src="https://i.ya-webdesign.com/images/space-invaders-alien-png.png" style = "width:50px; height:50px;" onclick="window.open('https://arcade.ly/games/space-invaders/', '_blank');">
          </div> -->
        </div>

      </div>
    </div>

  <div id="popup">
     <p><b>Date & Time: </b><span id="datetime"></span></p>

      <div><p>
        <b>Location of <span id="satname"></span>:</b> <br>
        Latitude: <span id="sat_latitude"> </span>
        <br>
        Longitude: <span id="sat_longitude"> </span></p>
      </div>

      <p><b>Is it above me? </b><span style="color:#C0ECAD;" id="result_sat"></span></p>
      <p><b>Weather Description: </b><span id="cloud_descrip"></span></p>
      <p><b>Can I see it? </b> <span id=cloud_perc></span> </p>
      <p><b>Time since last request for <span id="satname2"></span> position: </b><span id="count"> </span></p>
      <a class="a" href="#" onclick="toggleclose(); history(); setTimeout(addhistory, 1000)">Close</a>
  </div>

  <script type="text/javascript">
    function toggle(){
      if (sat_key == undefined) {
        alert('Please select a satellite before pressing compute.');
      }
      else if (userlat == "" || userlong== "" || userlat == undefined || userlong == undefined){
        alert('Please select, or reinput, a location before pressing compute.')
      }
      else if (userlat == "NV" || userlong == "NV") {
        alert('Please enter a latitude and longitude within the valid ranges. Latitude: -90 to 90. Longitude: -180 to 180.')
      }
      else{
        var blur = document.getElementById('blur');
        blur.classList.toggle('active');
        var popup = document.getElementById('popup');
        popup.classList.toggle('active');
      }
    }
    function toggleclose(){
      var blur = document.getElementById('blur');
      blur.classList.toggle('active');
      var popup = document.getElementById('popup');
      popup.classList.toggle('active');
    }
  </script>

  <script>
    var maplat; // describes the latitude pulled from the google map
    var maplong; // describes the longitude pulled from the google map
    var marker; // describes the google map marker
    var map; // describes the google map
    /* function that initializes the google map, google autocomplete search bar,
    and the google map marker. takes no parameters. */
    var infowindow;
    function initMap() {
      var latlong = new google.maps.LatLng(38.031078, -78.512772); // default location for google map marker
      var options = {
        zoom: 12,
        center: latlong
      }
      map = new google.maps.Map(document.getElementById('map'), {
      center: {lat: 38.031078, lng: -78.512772},
      zoom: 4,
      styles: [
        {elementType: 'geometry', stylers: [{color: '#242F3E'}]},
        {elementType: 'labels.text.stroke', stylers: [{color: '#242F3E'}]},
        {elementType: 'labels.text.fill', stylers: [{color: '#746855'}]},
        {
          featureType: 'administrative.locality',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'poi',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'poi.park',
          elementType: 'geometry',
          stylers: [{color: '#263C3F'}]
        },
        {
          featureType: 'poi.park',
          elementType: 'labels.text.fill',
          stylers: [{color: '#6B9A76'}]
        },
        {
          featureType: 'road',
          elementType: 'geometry',
          stylers: [{color: '#38414E'}]
        },
        {
          featureType: 'road',
          elementType: 'geometry.stroke',
          stylers: [{color: '#212A37'}]
        },
        {
          featureType: 'road',
          elementType: 'labels.text.fill',
          stylers: [{color: '#9CA5b3'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'geometry',
          stylers: [{color: '#746855'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'geometry.stroke',
          stylers: [{color: '#1F2835'}]
        },
        {
          featureType: 'road.highway',
          elementType: 'labels.text.fill',
          stylers: [{color: '#F3D19C'}]
        },
        {
          featureType: 'transit',
          elementType: 'geometry',
          stylers: [{color: '#2F3948'}]
        },
        {
          featureType: 'transit.station',
          elementType: 'labels.text.fill',
          stylers: [{color: '#D59563'}]
        },
        {
          featureType: 'water',
          elementType: 'geometry',
          stylers: [{color: '#17263C'}]
        },
        {
          featureType: 'water',
          elementType: 'labels.text.fill',
          stylers: [{color: '#515C6D'}]
        },
        {
          featureType: 'water',
          elementType: 'labels.text.stroke',
          stylers: [{color: '#17263C'}]
        }
      ]
    });



      var input = document.getElementById('searchTextField'); // user input from the google autocomplete search bar
      var manualLat = document.getElementById('ulat');
      var manualLng = document.getElementById('ulong');

      infowindow = new google.maps.InfoWindow({
        content: ''
      });

      map.controls[google.maps.ControlPosition.LEFT_TOP].push(manualLat);
      map.controls[google.maps.ControlPosition.LEFT_TOP].push(manualLng);

      map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
      var autocomplete = new google.maps.places.Autocomplete(input);
      autocomplete.bindTo('bounds', map);

      // google map marker
      marker = new google.maps.Marker({
        position: latlong,
        map: map,
        draggable: true, // user can freely drag the marker around the map
        animation: google.maps.Animation.DROP // marker drops onto the screen
      });

      autocomplete.addListener('place_changed', function() {
        infowindow.close();
        var place = autocomplete.getPlace();
        /* if the user enters an unknown address into the google autocomplete
        search bar an invalid address message will print */
        if (!place.geometry) {
          document.getElementById('comp').innerHTML = "Invalid address: " + input.value;
          return;
        }
        /* setting the bounds of the map according to user input and placing the
        marker at the user's provided address */
        map.fitBounds(place.geometry.viewport);
        marker.setPosition(place.geometry.location);
        marker.setVisible(true);

        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        //document.getElementById('comp').innerHTML= "Address: " + input.value + ". Latitude and longitude: " + userlat + ", " + userlong;

        var requestInfo = "<b>Address: </b>" + input.value + ". <br>" + "<b>Latitude: </b>" + userlat + ", <br>" + "<b>Longitude: </b>" + userlong;

        infowindow.setContent(requestInfo);
        // same functions as compute button
        latlonginput(); toggle(); myFunction(); resetlatlong(); calc(); resetCounter(); counter(); reset(); markerPosition(); setTimeout(clouds, 1000); computeZoom();

        infowindow.open(map,marker);
      });

      /* allows the user to select a place on the map by clicking on the map */
      google.maps.event.addListener(map, 'click', function(event) {
        infowindow.close();
        placeMarker(event.latLng);
        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        /* printing out the user latitude and longitude */
        //document.getElementById('comp').innerHTML = "User latitude and longitude: " + userlat + ", " + userlong;
      });

      /* allows the user to select a place on the map by dragging the google map marker*/
      google.maps.event.addListener(marker, 'dragend', function() {
        infowindow.close();
        maplat = marker.getPosition().lat(); // latitude from the google map
        maplong = marker.getPosition().lng(); // longitude from the google map
        document.getElementById('ulat').value = maplat; // clearing the latitude input box
        document.getElementById('ulong').value = maplong; // clearing the longitude input box
        userlat = maplat; // setting user latitude equal to the latitude pulled from the google map
        userlong = maplong; // setting user longitude equal to the longitude pulled from the google map
        /* printing out the user latitude and longitude */
        //document.getElementById('comp').innerHTML = "User latitude and longitude: " + userlat + ", " + userlong;
      });

      /* function that takes a location and places a marker on the location */
      function placeMarker(location) {
        /* if a marker has not yet been created then a new marker is created and
        placed at the given loaction */
        if (marker == undefined) {
          marker = new google.maps.Marker({
            position: location,
            map: map,
            animation: google.maps.Animation.DROP,
          });
        } else {
          infowindow.close();
          /* if a marker has already been created then the marker's location is
          moved to the provided location */
          marker.setPosition(location);
          userlat = marker.getPosition().lat(); // setting the user latitude to the marker's latitude
          userlong = marker.getPosition().lng(); // setting the user longitude to the marker's longitude
          map.setZoom(10);
          /* checks to ensure the latitude and longitude are correctly assigned */
          console.log("TEST LAT: " + marker.getPosition().lat() + " check equals " + userlat);
          console.log("TEST LONG: " + marker.getPosition().lng() + " check equals " + userlong);
        }
        map.setCenter(location); // centering the map on the provided location
      }
    }
    function manualInfoWindow() {
      if (userlat !== "" && userlong !== "" && userlat !== undefined && userlong !== undefined && !isNaN(userlat) && !isNaN(userlong)) {
        var requestInfo = "<b>Latitude: </b>" + userlat + ", <br>" + "<b>Longitude: </b>" + userlong;

        infowindow.setContent(requestInfo);
        infowindow.open(map, marker);
      }
    }

    /* function that resets the maplat and maplong variables. this function also
    resets the google autocomplete search bar everytime the compute button is clicked. */
    function reset() {
      infowindow.close();
      maplat = "";
      maplong = "";
      document.getElementById('searchTextField').value = "";
      document.getElementById('ulat').value = "";
      document.getElementById('ulong').value = "";
    }

    /* function that centers the marker/map around the user latitude and longitude. */
    function markerPosition() {
      /* if the user inputs latitude and longitude (the userlat and userlong variables
      are not empty) then the marker/map center around the provided latitude/longitude */
      if (userlat && userlong) {
        infowindow.close();
        // creating a google LatLng object
        myLatLng = new google.maps.LatLng({lat: parseFloat(userlat), lng: parseFloat(userlong)});
        marker.setPosition(myLatLng);
        map.setCenter(myLatLng);
        map.setZoom(5);
      }
    }
    function computeZoom() {
      map.setZoom(10);
    }
  </script>

  <!-- calling the google map api -->
  <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyCT6pTAuib-JSgt6j1obhJsrcbPm_dxt1s&libraries=places&callback=initMap" async defer>
  </script>
  <br>

  <!--<div class="compute">
    <button onclick="myFunction(); calc(); latlonginput(); resetCounter(); counter(); reset(); markerPosition(); clouds();">COMPUTE</button>
  </div>-->

  <script>
  var userlat; // describes the user's latitude
  var userlong; // describes the user's longitude
  var inputLat = ""; // describes the manually inputted latitude
  var inputLong = ""; // describes the manually inputted longitude
  var result; // describes the combined user latitude and longitude
  /* function that controls the manual input of latitude and longitude. displays
  inputted values on the screen and controls user input. */
  function latlonginput() {
    inputLat = document.getElementById('ulat').value; // pulling user latitude from input box
    inputLong = document.getElementById('ulong').value; // pulling user longitude from input box
    /* only executes if the user has not yet entered information into the google
    auto complete search bar. if information has already been entered into the
    google autocomplete search bar when compute is pressed, that data will be used
    for calculations */
    if (maplat == "" && maplong == "" || maplat == undefined && maplong == undefined) {
      // executes if the input textboxes contain data
      if (inputLat !== "" && inputLong !== "") {
        /* executes if the user inputted non-number data into text fields */
        if (isNaN(inputLat) || isNaN(inputLong)) {
          document.getElementById('comp').innerHTML = "Please enter a valid number."
        }
        // ensuring that the inputted values are numbers
        else if ((parseFloat(inputLat) > -91 && parseFloat(inputLat) < 91) && (parseFloat(inputLong) > -181 && parseFloat(inputLong) < 181)) {
          userlat = inputLat; // setting user latitude equal to the inputted value
          userlong = inputLong; // setting user longitude equal to the inputted value
          result = userlat + ", " + userlong;
          // displaying the inputted user latitude and longitude
          //document.getElementById('comp').innerHTML="User latitude and longitude: " + result;
          /* reseting the input boxes after compute is pressed */
          document.getElementById('ulat').value = "";
          document.getElementById('ulong').value = "";
        }
        else {
          userlat = "NV";
          userlong = "NV";
          //document.getElementById('comp').innerHTML = "Please enter values within the latitude and longitude ranges."
        }
      }
      /* executes if compute is pressed and both input boxes are empty */
      else if (inputLat == "" && inputLong == "") {
        userlat = inputLat;
        userlong = inputLong;
        //document.getElementById('comp').innerHTML="Please enter a latitude and longitude.";
      }
      /* executes if compute is pressed and the longitude textbox is empty */
      else if (inputLong == "") {
        userlat = inputLat;
        userlong = inputLong;
        //document.getElementById('comp').innerHTML="Please enter a longitude.";
      }
      /* executes if compute is pressed and the latitude textbox is empty */
      else {
        userlat = inputLat;
        userlong = inputLong;
        //document.getElementById('comp').innerHTML="Please enter a latitude.";
      }
    }
    else {
      result = maplat + ", " + maplong;
    }
  }
  </script>

  <script>
  var date;
  function myFunction() {
    var dt = new Date();
    date = (("0"+dt.getDate()).slice(-2)) +"/"+ (("0"+(dt.getMonth()+1)).slice(-2)) +"/"+ (dt.getFullYear()) +" "+ (("0"+dt.getHours()).slice(-2)) +":"+ (("0"+dt.getMinutes()).slice(-2));
    document.getElementById("datetime").innerHTML = date;
  }
  </script>

  <script>
  var count = null;
  function counter(){
   var i = 0;
   count = setInterval(() => {
     document.getElementById("count").innerHTML = i;
     i+=1;
   }, 1000);
  }
  /* resets the counter everytime compute is pressed */
  function resetCounter() {
    clearInterval(count);
  }
 </script>

    <script>
    function addhistory() {
      var table = document.getElementById("myTable");
      var row = table.insertRow(1);
      var cell1 = row.insertCell(0);
      var cell2 = row.insertCell(1);
      var cell3 = row.insertCell(2);
      var cell4 = row.insertCell(3);
      cell1.innerHTML = date;
      cell2.innerHTML = satlat + ", " + satlong;
      cell3.innerHTML = result;
      cell4.innerHTML = result_sat;
    }
    </script>

</body>

<script>
  var satlat;
  var satlong;
  var result_sat;
  function resetlatlong(){
  document.getElementById("sat_longitude").innerHTML = "";
  document.getElementById("sat_latitude").innerHTML = "";
  document.getElementById("result_sat").innerHTML = "";
  document.getElementById("cloud_perc").innerHTML = "";
  document.getElementById("cloud_descrip").innerHTML= "";
  }

  function calc(){
  fetch("https://www.n2yo.com/rest/v1/satellite/positions/"+sat_key+"/"+userlat+"/"+userlong+"/0/1/&apiKey=UG67VU-3MRS33-SWNLRM-4I6R").then(r => r.json()).then(data => {

  var long = data.positions[0].satlongitude;
  var lat = data.positions[0].satlatitude;

  satlat = lat.toFixed(4);
  satlong = long.toFixed(4);
  document.getElementById("sat_latitude").innerHTML = satlat;
  document.getElementById("sat_longitude").innerHTML = satlong;
  // document.getElementById("sat_longitude").innerHTML = long.toFixed(4);
  // document.getElementById("sat_latitude").innerHTML = lat.toFixed(4);

  const earthradkm = 6371
  var satalt = data.positions[0].sataltitude;
  var distkmarc = earthradkm*Math.acos(earthradkm/(earthradkm+satalt))
  var degreesdist = distkmarc*1000*0.0001/11.1

  var ulong = userlong;
  var ulat = userlat;
  console.log("Cheking latitude: " + ulat);
  console.log("Checking longitude: " + ulong);
  var num_long = parseFloat(long);
  var num_lat = parseFloat(lat)
  var num_ulong = parseFloat(ulong)
  var num_ulat = parseFloat(ulat)
  var x_cir = num_long - num_ulong
  var y_cir = num_lat - num_ulat
  var visioncheck = Math.pow(x_cir,2) + Math.pow(y_cir,2)
  if (visioncheck<=Math.pow(degreesdist.toFixed(4),2)){
    result_sat = "Yes";
    visiblevar = true
    document.getElementById("result_sat").innerHTML = result_sat;
  }else{
    result_sat = "No";
    visiblevar = false
    document.getElementById("result_sat").innerHTML = result_sat;
  }
})
}

  var cloudy_desc;
  var cloudy;
  var light;
  var mid;
  var heavy;
  function clouds(){
    fetch("https://api.openweathermap.org/data/2.5/weather?lat="+userlat+"&lon="+userlong+"&appid=658295ed6de928f64794e23ee97cab06").then(r_weath => r_weath.json()).then(data_weath => {
        cloudy_desc = data_weath.weather[0].description;
        cloudy = data_weath.clouds.all;
        document.getElementById("cloud_descrip").innerHTML = cloudy_desc;
        if(cloudy<=33&&visiblevar===true){
          light = "There is likely light to no cloud coverage in your area, so the satellite should be visible.";
          document.getElementById("cloud_perc").innerHTML = light;
      }else if(cloudy<=33&&visiblevar===false){
        light = "There is likely light to no cloud coverage in your area, but the satellite is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = light;
      }else if (cloudy<=66&&visiblevar===true){
        mid = "There is likely mid to heavy cloud coverage in your area, so the satellite may be visible between clouds.";
        document.getElementById("cloud_perc").innerHTML = mid;
      }else if (cloudy<=66&&visiblevar===false){
        mid = "There is likely mid to heavy cloud coverage in your area, and the satellite is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = mid;
      }else if (cloudy>66&&visiblevar===true){
        heavy = "There is likely mid to heavy cloud coverage in your area, but your view of the satellite is likely impeded by cloud cover.";
        document.getElementById("cloud_perc").innerHTML = heavy;
      }else{
        heavy = "There is likely very heavy cloud coverage in your area, and the satellite is not currently visible from your location.";
        document.getElementById("cloud_perc").innerHTML = heavy;
      }
    })
  }

  function history() {
    document.getElementById("datetimeprint").innerHTML = date;
    document.getElementById("sat_latitudeprint").innerHTML = satlat;
    document.getElementById("sat_longitudeprint").innerHTML = satlong;
    document.getElementById("result_satprint").innerHTML = result_sat;
    document.getElementById("cloud_descrip_print").innerHTML = cloudy_desc;
    /* eliminate repetitive if statements */
    if (light) {
      document.getElementById("cloud_perc_print").innerHTML = light;
    }
    else if (mid) {
      document.getElementById("cloud_perc_print").innerHTML = mid;
    }
    else if (heavy) {
      document.getElementById("cloud_perc_print").innerHTML = heavy;
    }
    document.getElementById("prev_position").innerHTML = result;
  }


</script>


</html>
